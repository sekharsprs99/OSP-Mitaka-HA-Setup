---
# tasks file for controller-neutron
  - name: Create database for neutron
    mysql_db: login_user=root login_password="{{ mysql_root_password }}" name=neutron state=present
    when: ansible_hostname == controller01
    tags: controller-neutron-db

  - name: Create neutron user and grant privileges to neutron database.
    mysql_user: login_user=root login_password="{{ mysql_root_password }}" name=neutron password={{ glance_dbpass }} priv=*.*:ALL state=present host={{ item }}
    with_items:
     - "{{ controller01 }}"
     - "{{ controller01_eth0 }}"
     - "{{ controller01_eth1 }}"
     - "{{ controller02 }}"
     - "{{ controller02_eth0 }}"
     - "{{ controller02_eth1 }}"
     - "{{ controller03 }}"
     - "{{ controller03_eth0 }}"
     - "{{ controller03_eth1 }}"
     - "{{ compute01 }}"
     - "{{ compute01_eth0 }}"
     - "{{ compute01_eth1 }}"
     - "{{ internal_vip }}"
     - "{{ internal_vip_fqdn }}"
     - "{{ public_vip_fqdn }}"
     - "{{ public_vip }}"
     - 127.0.0.1
     - localhost
     - ::1
    when: ansible_hostname == controller01
    tags: controller-neutron-db

  - name: Install neutron-server neutron-plugin-ml2 neutron-linuxbridge-agent neutron-l3-agent neutron-dhcp-agent neutron-metadata-agent on controller nodes
    apt: name={{ item }} state=present update_cache=yes force=yes cache_valid_time=10800
    with_items:
     - neutron-server
     - neutron-plugin-ml2
     - neutron-linuxbridge-agent
     - neutron-l3-agent
     - neutron-dhcp-agent
     - neutron-metadata-agent
    tags: controller-neutron-packages

  - name: configure connection in /etc/neutron/neutron.conf
    ini_file: dest=/etc/neutron/neutron.conf
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'database', option: 'connection', value: "mysql+pymysql://neutron:{{ neutron_dbpass }}@{{ internal_vip_fqdn }}/neutron" }
      - { section: 'keystone_authtoken', option: 'auth_uri', value: "http://{{ public_vip_fqdn }}:{{ keystone_public_port }}" }
      - { section: 'keystone_authtoken', option: 'auth_url', value: "http://{{ internal_vip_fqdn }}:{{ keystone_admin_port }}" }
      - { section: 'keystone_authtoken', option: 'memcached_servers', value: "{% for host in groups['controller_nodes'] %}{{ hostvars[host]['ansible_fqdn' ] }}:{{ memcached_port }}{% if not loop.last %},{% endif %}{% endfor %}" }
      - { section: 'keystone_authtoken', option: 'auth_type', value: 'password' }
      - { section: 'keystone_authtoken', option: 'project_domain_name', value: 'default' }
      - { section: 'keystone_authtoken', option: 'user_domain_name', value: 'default' }
      - { section: 'keystone_authtoken', option: 'project_name', value: 'service' }
      - { section: 'keystone_authtoken', option: 'username', value: 'neutron' }
      - { section: 'keystone_authtoken', option: 'password', value: "{{ nova_user_pass }}" }
      - { section: 'DEFAULT', option: 'core_plugin', value: 'ml2' }
      - { section: 'DEFAULT', option: 'service_plugins', value: 'router' }
      - { section: 'DEFAULT', option: 'allow_overlapping_ips', value: 'True' }
      - { section: 'DEFAULT', option: 'rpc_backend', value: 'rabbit' }
      - { section: 'DEFAULT', option: 'bind_port', value: '{{ neutron_port }}' }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_hosts', value: "{% for host in groups['controller_nodes'] %}{{ hostvars[host]['ansible_fqdn' ] }}:5672{% if not loop.last %},{% endif %}{% endfor %}" }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_userid', value: 'openstack' }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_password', value: "{{ rabbit_pass }}" }
      - { section: 'DEFAULT', option: 'auth_strategy', value: 'keystone' }
      - { section: 'DEFAULT', option: 'notify_nova_on_port_status_changes', value: 'True' }
      - { section: 'DEFAULT', option: 'notify_nova_on_port_data_changes', value: 'True' }
      - { section: 'nova', option: 'auth_url', value: "http://{{ internal_vip_fqdn }}:{{ keystone_admin_port }}" }
      - { section: 'nova', option: 'auth_type', value: 'password' }
      - { section: 'nova', option: 'project_domain_name', value: 'default' }
      - { section: 'nova', option: 'user_domain_name', value: 'default' }
      - { section: 'nova', option: 'region_name', value: 'RegionOne' }
      - { section: 'nova', option: 'project_name', value: 'service' }
      - { section: 'nova', option: 'username', value: 'nova' }
      - { section: 'nova', option: 'password', value: "{{ nova_user_pass }}" }

  - name: configure /etc/neutron/plugins/ml2/ml2_conf.ini
    ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf.ini
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'ml2', option: 'type_drivers', value: "flat,vlan,vxlan" }
      - { section: 'ml2', option: 'tenant_network_types', value: 'vxlan' }
      - { section: 'ml2', option: 'mechanism_drivers', value: "linuxbridge,l2population" }
      - { section: 'ml2', option: 'extension_drivers', value: 'port_security' }
      - { section: 'ml2_type_flat', option: 'flat_networks', value: 'provider' }
      - { section: 'ml2_type_vxlan', option: 'vni_ranges', value: "1:1000" }
      - { section: 'securitygroup', option: 'enable_ipset', value: 'True' }

  - name: update /etc/neutron/plugins/ml2/linuxbridge_agent.ini
    ini_file: dest=/etc/neutron/plugins/ml2/linuxbridge_agent.ini
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'linux_bridge', option: 'physical_interface_mappings', value: "provider:{{ mgmt_iface }}" }
      - { section: 'vxlan', option: 'local_ip', value: "{{ hostvars[inventory_hostname]['ansible_'+ mgmt_iface ]['ipv4']['address'] }}" }
      - { section: 'vxlan', option: 'enable_vxlan', value: 'True' }
      - { section: 'vxlan', option: 'l2_population', value: 'True'  }
      - { section: 'securitygroup', option: 'enable_security_group', value: 'True' }
      - { section: 'securitygroup', option: 'firewall_driver', value: "neutron.agent.linux.iptables_firewall.IptablesFirewallDriver" }

  - name: configure /etc/neutron/l3_agent.ini
    ini_file: dest=/etc/neutron/l3_agent.ini
              section={{ item.section }}
              option={{ item.option }}
              value={{ item.value }}
    with_items:
      - { section: 'DEFAULT', option: 'interface_driver', value: "neutron.agent.linux.interface.BridgeInterfaceDriver" }
      - { section: 'DEFAULT', option: 'external_network_bridge', value: "" }

  - name: configure /etc/neutron/dhcp_agent.ini
    ini_file: dest=/etc/neutron/dhcp_agent.ini
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'DEFAULT', option: 'interface_driver', value: "neutron.agent.linux.interface.BridgeInterfaceDriver" }
      - { section: 'DEFAULT', option: 'dhcp_driver', value: "neutron.agent.linux.dhcp.Dnsmasq" }
      - { section: 'DEFAULT', option: 'enable_isolated_metadata', value: 'True' }

  - name: Checking Administration Token
    stat: path=/root/SECRET_token
    register: secret_token
    tags: neutron-secret-token-check

  - name: Creating Administration Token
    shell: /usr/bin/openssl rand -hex 10 > SECRET_token
    when:
      - secret_token.stat.exists != True
      - ansible_hostname == controller01
    tags: neutron-secret-token-creation

  - name: Make Sure All controller nodes have same same keystone admin_token
    synchronize: src=/root/SECRET_token dest=/root/SECRET_token
    delegate_to: "{{ controller01_eth0 }}"
    tags: neutron-secret-token-cp

  - name: Secret token register
    command: cat /root/SECRET_token
    register: SECRET_TOKEN
    when: ansible_hostname != compute01

  - name: configure /etc/neutron/metadata_agent.ini
    ini_file: dest=/etc/neutron/metadata_agent.ini
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'DEFAULT', option: 'nova_metadata_ip', value: "{{ hostvars[inventory_hostname]['ansible_'+ mgmt_iface ]['ipv4']['address'] }}" }
      - { section: 'DEFAULT', option: 'metadata_proxy_shared_secret', value: "{{ SECRET_TOKEN.stdout }}" }
      - { section: 'DEFAULT', option: 'dhcp_agents_per_network', value: '2' }
      - { section: 'DEFAULT', option: 'l3_ha', value: 'True' }
      - { section: 'DEFAULT', option: 'allow_automatic_l3agent_failover', value: 'True' }
      - { section: 'DEFAULT', option: 'max_l3_agents_per_router', value: '3' }
      - { section: 'DEFAULT', option: 'min_l3_agents_per_router', value: '2' }
    ignore_errors: yes

  - name: configure neutron section in /etc/nova/nova.conf
    ini_file: dest=/etc/nova/nova.conf
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'neutron', option: 'auth_url', value: "http://{{ internal_vip_fqdn }}:{{ keystone_admin_port }}" }
      - { section: 'neutron', option: 'auth_type', value: 'password' }
      - { section: 'neutron', option: 'project_domain_name', value: 'default' }
      - { section: 'neutron', option: 'user_domain_name', value: 'default' }
      - { section: 'neutron', option: 'region_name', value: 'RegionOne' }
      - { section: 'neutron', option: 'project_name', value: 'service' }
      - { section: 'neutron', option: 'username', value: 'neutron' }
      - { section: 'neutron', option: 'password', value: "{{ neutron_user_pass }}" }
      - { section: 'neutron', option: 'service_metadata_proxy', value: 'True' }
      - { section: 'neutron', option: 'metadata_proxy_shared_secret', value: "{{ SECRET_TOKEN.stdout }}" }
    ignore_errors: yes

  - name: Populate the Network service database in controller node
    shell: /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
    when: ansible_hostname == controller01

  - name: Populate the Network service database in controller node
    shell: /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
    when: ansible_hostname == controller01

  - name: Restart Nova-Api
    service: name={{ item }} state=restarted
    with_items:
      - nova-api
      - neutron-server
      - neutron-linuxbridge-agent
      - neutron-dhcp-agent
      - neutron-metadata-agent
      - neutron-l3-agent

  - name: Remove /var/lib/neutron/neutron.sqlite
    file: path=/var/lib/neutron/neutron.sqlite state=absent
