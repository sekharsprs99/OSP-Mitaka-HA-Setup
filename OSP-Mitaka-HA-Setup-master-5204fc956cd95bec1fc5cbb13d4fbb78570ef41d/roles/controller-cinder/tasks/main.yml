---
# tasks file for controller-cinder
#  - name: Download the OpenStack Image API resource to Pacemaker
#    file: path=/usr/lib/ocf/resource.d/openstack state=directory mode=0755
#  - get_url: url=https://git.openstack.org/cgit/openstack/openstack-resource-agents/plain/ocf/cinder-api dest=/usr/lib/ocf/resource.d/openstack/cinder-api mode=0755
#  - name: Add p_glance-api resource
#    shell: crm configure primitive p_cinder-api ocf:openstack:cinder-api params config="/etc/cinder/cinder.conf" os_password="{{ glance_user_pass }}" os_username="admin" os_tenant_name="admin" keystone_get_token_url="http://{{ internal_vip_fqdn }}:5000/v2.0/tokens" op monitor interval="30s" timeout="30s"
#    ignore_errors: yes

  - name: Create database for cinder
    mysql_db: login_user=root login_password="{{ mysql_root_password }}" name=cinder state=present

  - name: Create glance user and grant privileges to cinder database.
    mysql_user: login_user=root
                login_password="{{ mysql_root_password }}"
                name=cinder password={{ cinder_dbpass }}
                priv=*.*:ALL
                state=present
                host={{ item }}
    with_items:
     - "{{ controller01 }}"
     - "{{ controller01_eth0 }}"
     - "{{ controller01_eth1 }}"
     - "{{ controller02 }}"
     - "{{ controller02_eth0 }}"
     - "{{ controller02_eth1 }}"
     - "{{ controller03 }}"
     - "{{ controller03_eth0 }}"
     - "{{ controller03_eth1 }}"
     - "{{ compute01 }}"
     - "{{ compute01_eth0 }}"
     - "{{ compute01_eth1 }}"
     - "{{ internal_vip }}"
     - "{{ internal_vip_fqdn }}"
     - "{{ public_vip_fqdn }}"
     - "{{ public_vip }}"
     - 127.0.0.1
     - localhost
     - ::1
    when: ansible_hostname == controller01

  - name: Install cinder and cinder-api cinder-scheduler on controller node
    apt: name={{ item }} state=present force=yes
    with_items:
     - cinder-api
     - cinder-scheduler

#  - name: update /etc/cinder/cinder.conf
#    ini_file: dest=/etc/cinder/cinder.conf
#              section= "{{ item.section }}"
#              state= "{{ item.state }}"
#    with_items:
#      - { section: 'keystone_authtoken', state: 'absent' }
#      - { section: 'keystone_authtoken', state: 'present' }

#  - name: update /etc/cinder/cinder.conf
#    ini_file: dest=/etc/cinder/cinder.conf
#              section=oslo_messaging_rabbit
#              option=rabbit_host
#              state=absent

  - name: update /etc/cinder/cinder.conf controller01
    ini_file: dest=/etc/cinder/cinder.conf
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'keystone_authtoken', option: 'auth_uri', value: "http://{{ public_vip_fqdn }}:5000" }
      - { section: 'keystone_authtoken', option: 'auth_url', value: "http://{{ internal_vip_fqdn }}:35357" }
      - { section: 'keystone_authtoken', option: 'memcached_servers', value: "{{ controller01 }}:{{ memcached_port }},{{ controller02 }}:{{ memcached_port }},{{ controller03 }}:{{ memcached_port }}" }
      - { section: 'DEFAULT', option: 'osapi_volume_listen', value: "{{ controller01_eth1 }}" }
      - { section: 'DEFAULT', option: 'my_ip', value: "{{ controller01_eth1 }}" }
    when: ansible_eth1.ipv4.address == "{{ controller01_eth1 }}"

  - name: update /etc/cinder/cinder.conf controller02
    ini_file: dest=/etc/cinder/cinder.conf
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'keystone_authtoken', option: 'auth_uri', value: "http://{{ public_vip_fqdn }}:5000" }
      - { section: 'keystone_authtoken', option: 'auth_url', value: "http://{{ internal_vip_fqdn }}:35357" }
      - { section: 'keystone_authtoken', option: 'memcached_servers', value: "{{ controller01 }}:{{ memcached_port }},{{ controller02 }}:{{ memcached_port }},{{ controller03 }}:{{ memcached_port }}" }
      - { section: 'DEFAULT', option: 'osapi_volume_listen', value: '{{ controller02_eth1 }}' }
      - { section: 'DEFAULT', option: 'my_ip', value: "{{ controller02_eth1 }}" }
    when: ansible_eth1.ipv4.address == "{{ controller02_eth1 }}"

  - name: update /etc/cinder/cinder.conf controller03
    ini_file: dest=/etc/cinder/cinder.conf
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'keystone_authtoken', option: 'auth_uri', value: "http://{{ public_vip_fqdn }}:5000" }
      - { section: 'keystone_authtoken', option: 'auth_url', value: "http://{{ internal_vip_fqdn }}:35357" }
      - { section: 'keystone_authtoken', option: 'memcached_servers', value: "{{ controller01 }}:{{ memcached_port }},{{ controller02 }}:{{ memcached_port }},{{ controller03 }}:{{ memcached_port }}" }
      - { section: 'DEFAULT', option: 'osapi_volume_listen', value: "{{ controller03_eth1 }}" }
      - { section: 'DEFAULT', option: 'my_ip', value: "{{ controller03_eth1 }}" }
    when: ansible_eth1.ipv4.address == "{{ controller03_eth1 }}"


  - name: update /etc/cinder/cinder.conf
    ini_file: dest=/etc/cinder/cinder.conf
              section="{{ item.section }}"
              option="{{ item.option }}"
              value="{{ item.value }}"
    with_items:
      - { section: 'database', option: 'connection', value: "mysql+pymysql://cinder:{{ cinder_dbpass }}@{{ internal_vip_fqdn }}/cinder" }
      - { section: 'DEFAULT', option: 'rpc_backend', value: 'rabbit' }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_hosts', value: "{{ controller01 }}:5672,{{ controller02 }}:5672,{{ controller03 }}:5672" }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_userid', value: 'openstack' }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_password', value: "{{ rabbit_pass }}" }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_retry_interval', value: '1' }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_retry_backoff', value: '2' }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_max_retries', value: '0' }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_durable_queues', value: 'true' }
      - { section: 'oslo_messaging_rabbit', option: 'rabbit_ha_queues', value: 'true' }
      - { section: 'DEFAULT', option: 'auth_strategy', value: 'keystone' }
      - { section: 'keystone_authtoken', option: 'auth_type', value: 'password' }
      - { section: 'keystone_authtoken', option: 'project_domain_name', value: 'default' }
      - { section: 'keystone_authtoken', option: 'user_domain_name', value: 'default' }
      - { section: 'keystone_authtoken', option: 'project_name', value: 'service' }
      - { section: 'keystone_authtoken', option: 'username', value: 'cinder' }
      - { section: 'keystone_authtoken', option: 'password', value: "{{ cinder_user_pass }}" }
      - { section: 'oslo_concurrency', option: 'lock_path', value: "/var/lib/cinder/tmp" }

  - name: Populate the Block Storage database in controller node
    command: su -s /bin/sh -c "cinder-manage db sync" cinder
    when: ansible_eth1.ipv4.address == "{{ controller01_eth0 }}"

  - name: Populate the Block Storage database in controller node
    command: su -s /bin/sh -c "cinder-manage db sync" cinder
    when: ansible_eth1.ipv4.address != "{{ controller01_eth1 }}"

  - name: Restart Cinder-scheduler
    service: name=cinder-scheduler state=restarted

  - name: Restart Cinder-api
    service: name=cinder-api state=restarted

  - name: Remove /var/lib/cinder/cinder.sqlite
    file: path=/var/lib/cinder/cinder.sqlite state=absent
